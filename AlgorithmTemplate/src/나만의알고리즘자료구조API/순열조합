순열조합 코드방식
순열조합 함수 시그니쳐 

<기본골격>
public static void dfs(int next, int n , int r) // 조합인경우 int idx를 추가
{
	if(next>=r){
		//todo
		return;
	}
	for(int i =  ; i < n ; i ++){

	}
}



순열:
//중복해서 뽑으면 안되므로 flag배열 필요
public static boolean flag[] = new boolean[n]; // n개중에 r개를 뽑으므로 n개의 플래그배열생성
 public static int path[];
public static void dfs(int next, int n , int r) // 조합인경우 int idx를 추가
{
	if(next>=r){
		//todo
		return;
	}
	for(int i =0 ; i < n ; i ++){
		if(flag[i])
			continue;
		flag[i]=true;
		path[next]=i;
		dfs(next+1,n,r); 
		flag[i]=false;
	}
}

중복순열:
public static void dfs(int next, int n , int r) // 조합인경우 int idx를 추가
{
	if(next>=r){
		//todo
		return;
	}
	for(int i =0  ; i < n ; i ++){
		path[next]=i;
		dfs(next+1,n,r); 
	}
}
조합:
public static void dfs(int next, int n , int r, int idx) // 조합인경우 int idx를 추가
{
	if(next>=r){
		//todo
		return;
	}
	for(int i =idx  ; i < n ; i ++){
		path[next]=i;
		dfs(next+1,n,r,idx+1); //중복조합인경우는 idx+1이 아닌 idx
	}
}

중복조합:

public static void dfs(int next, int n , int r, int idx) // 조합인경우 int idx를 추가
{
	if(next>=r){
		//todo
		return;
	}
	for(int i =idx  ; i < n ; i ++){
		path[next]=i;
		dfs(next+1,n,r,idx); //중복조합인경우는 idx+1이 아닌 idx
	}
}


